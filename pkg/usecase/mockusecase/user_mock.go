// Code generated by MockGen. DO NOT EDIT.
// Source: pkg/usecase/interface/user.go

// Package mockusecase is a generated GoMock package.
package mockusecase

import (
	context "context"
	requests "ecommerce/pkg/commonhelp/requests.go"
	response "ecommerce/pkg/commonhelp/response"
	domain "ecommerce/pkg/domain"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockUserUseCase is a mock of UserUseCase interface.
type MockUserUseCase struct {
	ctrl     *gomock.Controller
	recorder *MockUserUseCaseMockRecorder
}

// MockUserUseCaseMockRecorder is the mock recorder for MockUserUseCase.
type MockUserUseCaseMockRecorder struct {
	mock *MockUserUseCase
}

// NewMockUserUseCase creates a new mock instance.
func NewMockUserUseCase(ctrl *gomock.Controller) *MockUserUseCase {
	mock := &MockUserUseCase{ctrl: ctrl}
	mock.recorder = &MockUserUseCaseMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockUserUseCase) EXPECT() *MockUserUseCaseMockRecorder {
	return m.recorder
}

// AddAdress mocks base method.
func (m *MockUserUseCase) AddAdress(ctx context.Context, UserID int, address requests.AddressReq) (domain.Address, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddAdress", ctx, UserID, address)
	ret0, _ := ret[0].(domain.Address)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AddAdress indicates an expected call of AddAdress.
func (mr *MockUserUseCaseMockRecorder) AddAdress(ctx, UserID, address interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddAdress", reflect.TypeOf((*MockUserUseCase)(nil).AddAdress), ctx, UserID, address)
}

// AddToWishList mocks base method.
func (m *MockUserUseCase) AddToWishList(ctx context.Context, wishList domain.WishList) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddToWishList", ctx, wishList)
	ret0, _ := ret[0].(error)
	return ret0
}

// AddToWishList indicates an expected call of AddToWishList.
func (mr *MockUserUseCaseMockRecorder) AddToWishList(ctx, wishList interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddToWishList", reflect.TypeOf((*MockUserUseCase)(nil).AddToWishList), ctx, wishList)
}

// ListWishlist mocks base method.
func (m *MockUserUseCase) ListWishlist(ctx context.Context, userID uint) ([]response.Wishlist, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListWishlist", ctx, userID)
	ret0, _ := ret[0].([]response.Wishlist)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListWishlist indicates an expected call of ListWishlist.
func (mr *MockUserUseCaseMockRecorder) ListWishlist(ctx, userID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListWishlist", reflect.TypeOf((*MockUserUseCase)(nil).ListWishlist), ctx, userID)
}

// OtpLogin mocks base method.
func (m *MockUserUseCase) OtpLogin(mobno string) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "OtpLogin", mobno)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// OtpLogin indicates an expected call of OtpLogin.
func (mr *MockUserUseCaseMockRecorder) OtpLogin(mobno interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "OtpLogin", reflect.TypeOf((*MockUserUseCase)(nil).OtpLogin), mobno)
}

// RemoveFromWishList mocks base method.
func (m *MockUserUseCase) RemoveFromWishList(ctx context.Context, wishList domain.WishList) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RemoveFromWishList", ctx, wishList)
	ret0, _ := ret[0].(error)
	return ret0
}

// RemoveFromWishList indicates an expected call of RemoveFromWishList.
func (mr *MockUserUseCaseMockRecorder) RemoveFromWishList(ctx, wishList interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RemoveFromWishList", reflect.TypeOf((*MockUserUseCase)(nil).RemoveFromWishList), ctx, wishList)
}

// UpdateAdress mocks base method.
func (m *MockUserUseCase) UpdateAdress(ctx context.Context, UserID int, address requests.AddressReq) (domain.Address, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateAdress", ctx, UserID, address)
	ret0, _ := ret[0].(domain.Address)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateAdress indicates an expected call of UpdateAdress.
func (mr *MockUserUseCaseMockRecorder) UpdateAdress(ctx, UserID, address interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateAdress", reflect.TypeOf((*MockUserUseCase)(nil).UpdateAdress), ctx, UserID, address)
}

// UserLogin mocks base method.
func (m *MockUserUseCase) UserLogin(ctx context.Context, user requests.Login) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UserLogin", ctx, user)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UserLogin indicates an expected call of UserLogin.
func (mr *MockUserUseCaseMockRecorder) UserLogin(ctx, user interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UserLogin", reflect.TypeOf((*MockUserUseCase)(nil).UserLogin), ctx, user)
}

// UserSignup mocks base method.
func (m *MockUserUseCase) UserSignup(ctx context.Context, user requests.Usersign) (response.UserValue, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UserSignup", ctx, user)
	ret0, _ := ret[0].(response.UserValue)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UserSignup indicates an expected call of UserSignup.
func (mr *MockUserUseCaseMockRecorder) UserSignup(ctx, user interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UserSignup", reflect.TypeOf((*MockUserUseCase)(nil).UserSignup), ctx, user)
}

// VeiwAdress mocks base method.
func (m *MockUserUseCase) VeiwAdress(ctx context.Context, UserID int) (domain.Address, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "VeiwAdress", ctx, UserID)
	ret0, _ := ret[0].(domain.Address)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// VeiwAdress indicates an expected call of VeiwAdress.
func (mr *MockUserUseCaseMockRecorder) VeiwAdress(ctx, UserID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "VeiwAdress", reflect.TypeOf((*MockUserUseCase)(nil).VeiwAdress), ctx, UserID)
}
